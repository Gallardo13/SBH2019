// <auto-generated />
using System;
using EfConsoleUtil;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EfConsoleUtil.Migrations
{
    [DbContext(typeof(StoreContextUtil))]
    [Migration("20191024232000_Recreate")]
    partial class Recreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("FSO.SDD.DbModel.DataFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("DataFacts");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceSystemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceSystemId");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JiraTaskKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GitBranches");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitCommit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComminHash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BranchId");

                    b.ToTable("GitCommits");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitCommitTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GitCommitTasks");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitPullRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MergedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BranchId");

                    b.HasIndex("StateId");

                    b.ToTable("GitPullRequests");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitPullRequestApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PullRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GitPullRequestApprovers");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitPullRequestState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GitPullRequestStates");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.IndicatorDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IndicatorDimensions");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.IndicatorSourceAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IndicatorSourceAggregates");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.IndicatorValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DimensionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DimensionValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("IndicatorSeriesId");

                    b.ToTable("IndicatorValues");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.IndicatorValueSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorValueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorValueSourceKeyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("IndicatorValueSources");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.IndicatorValueSourceKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IndicatorValueSourceKeys");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.IndicatorValuesSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IndicatorValuesSeries");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraEpic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeadlineDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpectationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinishDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("TasksEstimationValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("JiraEpics");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraEpicTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EpicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("JiraEpicTasks");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ActualATDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActualFinishDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActualIFTDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationItem")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlannedATDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlannedFinishDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlannedIFTDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksEstimationValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksRemainderValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("JiraReleases");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraReleaseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksEstimationValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksRemainderValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("JiraReleaseHistorys");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraReleaseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JiraReleaseStates");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraReleaseTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("JiraReleaseTasks");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraSprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("SprintEstimatedValue")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksEstimationValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("JiraSprints");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraSprintHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SptintId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksEstimationValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("JiraSprintHistorys");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraSprintSate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JiraSprintSates");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraSprintTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SprintId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("JiraSprintTasks");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigurationItem")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefectSeverity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Estimation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OriginalEstimation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("Remainder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StateId");

                    b.ToTable("JiraTasks");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraTaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefectSeverity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estimation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OriginalEstimation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Remainder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StateId");

                    b.HasIndex("TaskId");

                    b.ToTable("JiraTaskHistorys");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraTaskState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JiraTaskStates");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OptimalValueHigh")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OptimalValueLow")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.SourceSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SourceSystems");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FSO.SDD.DbModel.DataFact", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.DataSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.DataSource", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.SourceSystem", "System")
                        .WithMany()
                        .HasForeignKey("SourceSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitCommit", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.GitBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.GitPullRequest", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.GitBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.GitPullRequestState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.IndicatorValue", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.IndicatorDimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.IndicatorValuesSeries", "IndicatorSeries")
                        .WithMany()
                        .HasForeignKey("IndicatorSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraRelease", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.JiraReleaseState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraReleaseHistory", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.JiraReleaseState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraSprint", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.JiraSprintSate", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraSprintHistory", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.JiraSprintSate", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraTask", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.JiraTaskState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.JiraTaskHistory", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.JiraTaskState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSO.SDD.DbModel.JiraTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSO.SDD.DbModel.Metric", b =>
                {
                    b.HasOne("FSO.SDD.DbModel.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
